<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ns1="com.adobe.wheelerstreet.fig.panzoom.*"
	xmlns:ns2="com.adobe.washuhci.interactivehist.*" 
	creationComplete="{handleCreationComplete()}"
	xmlns:degrafa="http://www.degrafa.com/2007">
	
	<mx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
		
			[Bindable]
			private var _imageURL:String = "images/earth-map_small.jpg";
      		
      		private var _contextMenu:ContextMenu;
			private var _contextMenuItems:Array = ["Zoom In Image", "Zoom Out Image", "Show All Image", "Toggle Smooth Bitmap"];			
		
			/**
			* In its simplest form, the Pan|Zoom component offers a set of navigation 
			* tools that allow for freedom of motion along the X, Y, and Z axes. 
			* This style of navigation becomes necessary when dealing with massively 
			* scalable content (such as maps, or large files in image editing applications), 
			* and is the foundation of Zoomable User Interfaces (ZUI's).  
			* <p>
			* When used correctly, Pan|Zoom presents an intuitive and context-sensitive 
			* way to view content that reinforces the user's natural spatial and 
			* geographic ways of thinking.
			* </p>
			*/

			public function handleCreationComplete():void {
				
				// handle contenxt menu
				
				_contextMenu = new ContextMenu();
				_contextMenu.hideBuiltInItems();
	           
				for (var i:uint = 0; i<_contextMenuItems.length; i++) {
					
					var menuItem:ContextMenuItem = new ContextMenuItem(_contextMenuItems[i]);
					_contextMenu.customItems.push(menuItem);
					menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, handleContextMenu);
				}
				
				contextMenu = _contextMenu;
			}
	        
	        private function handleContextMenu(e:ContextMenuEvent):void {

	            
	            switch(ContextMenuItem(e.currentTarget).caption)
	            {
	            	case "Zoom In Image":
	            	
						imageViewer.zoomByOrigin("in")
	            	
	            		break;

	            	case "Zoom Out Image":
	            	
						imageViewer.zoomByOrigin("out")
	            	
	            		break;
	            		
	            	case "Show All Image":
	            	
	            		imageViewer.centerView();

	            		break;	 
	            		           		
	            	case "Toggle Smooth Bitmap":

	            		if (imageViewer.smoothBitmap == true)
	            		{
							imageViewer.smoothBitmap = false;            		
	            		} else
	            		{
							imageViewer.smoothBitmap = true;   	            			
	            		}

	            		break;	 

	            }
	        }
	        
		]]>
	</mx:Script>
	
	<mx:Style>
		/**
		Application {
			backgroundGradientColors: #000000, #222222;
		}		

		Panel {
			borderColor: #333333;
  			headerHeight: 0;	
			borderThicknessLeft: 4;
			borderThicknessRight: 4;
			borderThicknessTop: 4;
			borderThicknessBottom: 4;		
			color: #999999;
		}
	
		Button {		
			color: #000000;
			cornerRadius: 7;
		}
		**/
		.ZoomInButton {		
			disabledSkin: Embed(source="icons/demoIcons.swf",symbol="MinusButton_Disabled");
			downSkin: Embed(source="icons/demoIcons.swf",symbol="MinusButton_Down");
			overSkin: Embed(source="icons/demoIcons.swf",symbol="MinusButton_Over");
			upSkin: Embed(source="icons/demoIcons.swf",symbol="MinusButton_Up");		
		}	

		.ZoomOutButton {		
			disabledSkin: Embed(source="icons/demoIcons.swf",symbol="PlusButton_Disabled");
			downSkin: Embed(source="icons/demoIcons.swf",symbol="PlusButton_Down");
			overSkin: Embed(source="icons/demoIcons.swf",symbol="PlusButton_Over");
			upSkin: Embed(source="icons/demoIcons.swf",symbol="PlusButton_Up");
		}	
		
		/**
		Label {
			blendMode: invert;
		}
		
		CheckBox {
			color: #808080;			
		}
		
		VBox {
			borderStyle: solid;
			horizontalAlign: center; 
			cornerRadius: 10; 
			backgroundAlpha: 0.5; 
			backgroundColor: #000000;
			borderThickness: 0; 		
		}
		
		/*
		TextInput {
			borderStyle: solid;
			borderThickness: .5;
			cornerRadius: 7;
			backgroundAlpha: 0.2;
		}
		*/		
		
	</mx:Style>

	<mx:Canvas 
		 left="5" right="5" top="5" bottom="5">
		
		<!--ImageViewer -->
		<ns2:InteractiveMap
			id="imageViewer"
			imageURL="{ _imageURL }" 
			bitmapScaleFactorMax="1"
			bitmapScaleFactorMin=".2"
			width="100%" height="100%"
			 x="0" y="0"/>
			 
		<degrafa:Surface top="10" right="10" bottom="10" left="10">
	      <degrafa:fills>
	        <degrafa:SolidFill id="fill" color="#62ABCD"/>
	      </degrafa:fills>                                    
	      <degrafa:strokes> 
	        <degrafa:SolidStroke id="stroke" color="#FFFFFF" alpha="0.9" weight="1"/>
	      </degrafa:strokes>                                                
	      <degrafa:GeometryGroup> 
	        <degrafa:Path fill="{fill}" stroke="{stroke}" data="{input.text}"/>
	      </degrafa:GeometryGroup>
	    </degrafa:Surface>
		
		<!--Navigation controlls -->
		<mx:VBox id="navControls"
			width="50"
 			y="10" right="10" horizontalAlign="right" height="90">
			
			<mx:Spacer/>
			
			<mx:Button 
				toolTip="Zoom In"
				click="{imageViewer.zoom('in');}"
				 label="+" useHandCursor="true" buttonMode="true" fontSize="20" fontFamily="Tahoma" width="40" height="30"/>

			<mx:Button 
				toolTip="Zoom Out"
				click="{ imageViewer.zoom('out'); }"			
				 buttonMode="true" useHandCursor="true" fontFamily="Tahoma" fontSize="20" label="â€“"/>	
			
			<mx:Spacer/>
										
		</mx:VBox>	
		
		<!-- DEBUGGING, comment out to hide 				
		<mx:VBox verticalGap="0" bottom="10" left="10">
			<mx:Label text="DEBUG:" blendMode="invert"/>
			<mx:HBox width="100%">
				<mx:Label text="Time:" blendMode="invert"/>
				<mx:Label text="{imageViewer.time}" id="timeMonitorLabel" blendMode="invert"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="Res:" blendMode="invert"/>
				<mx:Label text="{imageViewer.timeZoom}" id="resMonitorLabel" blendMode="invert"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="Showing:" blendMode="invert"/>
				<mx:VBox width="100%" height="100" verticalGap="0">
					<mx:Label text="Political Borders" blendMode="invert" visible="{imageViewer.showBorderPolitical}"/>
					<mx:Label text="Cultural Borders" blendMode="invert" visible="{imageViewer.showBorderCultural}"/>
					<mx:Label text="Cities" blendMode="invert" visible="{imageViewer.showPlacesCities}"/>
					<mx:Label text="Battles" blendMode="invert" visible="{imageViewer.showPlacesBattles}"/>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		-->
	</mx:Canvas>
	

<!--  
	When run locally (or as an AIR application) 
	these controls let you load bitmaps from a URL.
	This is a handy device for testing.  
		
	<mx:ControlBar bottom="0" left="0" right="0">
	
		<mx:CheckBox
			label="Smooth Bitmap" 
			verticalCenter="317.5"
			left="115" width="120"
			change="{ imageViewer.smoothBitmap = CheckBox(event.currentTarget).selected }"
			/>

		<mx:TextInput
			text="http:\\"
			id="inputURL"
			width="100%"
			/>
			
		<mx:Button 
			label="Go"
			click="{imageViewer.imageURL = inputURL.text}"
			enabled="{!imageViewer.loadingImage}"
			/> 

	</mx:ControlBar>
-->

	<mx:ControlBar bottom="0" left="0" right="0" visible="false">

		<mx:TextInput
			id="input"
			width="100%"
			/>

	</mx:ControlBar>

</mx:Canvas>
